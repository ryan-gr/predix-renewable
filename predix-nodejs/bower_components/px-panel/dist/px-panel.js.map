{"version":3,"sources":["px-panel.es6.js"],"names":["Polymer","is","behaviors","IronResizableBehavior","IronA11yKeysBehavior","listeners","keyBindings","hostAttributes","properties","position","type","String","value","observer","opened","Boolean","notify","fixed","persistent","background","floating","minimizable","_fullSize","keyEventTarget","Object","document","body","open","close","_getContainerClasses","fullSize","classes","push","join","_persistentChanged","newValue","_handleResize","e","debouncer","_availableWidth","_measureAvailableWidth","isDebouncerActive","cancelDebouncer","debounce","bind","window","innerWidth","innerHeight","parentNode","getBoundingClientRect","width","height","_isHidden"],"mappings":"aAAA,CAAC,UAAW,CACVA,QAAQ,CAENC,GAAI,UAFE,CAINC,UAAW,CACTF,QAAQG,qBADC,CAETH,QAAQI,oBAFC,CAJL,CASNC,UAAW,CACT,cAAe,eADN,CATL,CAaN;;OAGAC,YAAa,CACX,MAAO,OADI,CAhBP,CAoBNC,eAAgB,CACd,OAAQ,QADM,CApBV,CAwBNC,WAAY,CACV;;QAGAC,SAAU,CACRC,KAAMC,MADE,CAERC,MAAO,OAFC,CAGRC,SAAU,eAHF,CAJA,CASV;;SAGAC,OAAQ,CACNJ,KAAMK,OADA,CAENH,MAAO,KAFD,CAGNI,OAAQ,IAHF,CAINH,SAAU,eAJJ,CAZE,CAkBV;;;SAIAI,MAAO,CACLP,KAAMK,OADD,CAELH,MAAO,KAFF,CAGLC,SAAU,eAHL,CAtBG,CA2BV;;;SAIAK,WAAY,CACVR,KAAMK,OADI,CAEVH,MAAO,KAFG,CAGVC,SAAU,oBAHA,CA/BF,CAoCV;;;;;SAMAM,WAAY,CACVT,KAAMC,MADI,CAEVC,MAAO,OAFG,CA1CF,CA8CV;;;SAIAQ,SAAU,CACRV,KAAMK,OADE,CAERH,MAAO,KAFC,CAlDA,CAsDV;;;;SAKAS,YAAa,CACXX,KAAMK,OADK,CAEXH,MAAO,KAFI,CA3DH,CA+DV;;;SAIAU,UAAW,CACTZ,KAAMK,OADG,CAETH,MAAO,KAFE,CAnED,CAuEV;;SAGAW,eAAgB,CACdb,KAAMc,MADQ,CAEdZ,MAAO,gBAAW,CAChB,MAAOa,UAASC,IACjB,CAJa,CA1EN,CAxBN,CA0GN;;MAGAC,IA7GM,gBA6GC,CACL,KAAKb,MAAL,CAAc,IACf,CA/GK,CAgHN;;MAGAc,KAnHM,iBAmHE,CACN,GAAG,CAAC,KAAKV,UAAT,CAAqB,CACnB,KAAKJ,MAAL,CAAc,KACf,CACF,CAvHK,CAwHN;;OAGAe,oBA3HM,+BA2HepB,QA3Hf,CA2HwBU,UA3HxB,CA2HmCF,KA3HnC,CA2HyCC,UA3HzC,CA2HoDJ,MA3HpD,CA2H2DM,QA3H3D,CA2HoEC,WA3HpE,CA2HgFS,QA3HhF,CA2H0F,CAC9F,GAAIC,SAAU,CAACtB,QAAD,CAAWU,UAAX,CAAd,CACA,GAAGF,KAAH,CAAUc,QAAQC,IAAR,CAAa,OAAb,EACV,GAAGd,UAAH,CAAea,QAAQC,IAAR,CAAa,YAAb,EACf,GAAGlB,MAAH,CAAWiB,QAAQC,IAAR,CAAa,QAAb,EACX,GAAGZ,QAAH,CAAaW,QAAQC,IAAR,CAAa,UAAb,EACb,GAAGX,WAAH,CAAgBU,QAAQC,IAAR,CAAa,aAAb,EAChB,GAAGF,QAAH,CAAaC,QAAQC,IAAR,CAAa,WAAb,EACb,MAAOD,SAAQE,IAAR,CAAa,GAAb,CACR,CApIK,CAqIN;;OAGAC,kBAxIM,6BAwIaC,QAxIb,CAwIuB,CAC3B,GAAGA,UAAY,CAAC,KAAKrB,MAArB,CAA6B,CAC3B,KAAKa,IAAL,EACD,CACF,CA5IK,CA6IN;;;;;;;OAQAS,aArJM,wBAqJQC,CArJR,CAqJW,CACf,GAAMC,WAAY,yBAAlB,CACA,GAAI,MAAO,MAAKC,eAAZ,GAAgC,QAApC,CAA8C,CAC5C,KAAKC,sBAAL,GACA,MACD,CACD,GAAI,KAAKC,iBAAL,CAAuBH,SAAvB,CAAJ,CAAuC,CACrC,KAAKI,eAAL,CAAqBJ,SAArB,CACD,CACD,KAAKK,QAAL,CAAcL,SAAd,CAAyB,KAAKE,sBAAL,CAA4BI,IAA5B,CAAiC,IAAjC,CAAzB,CAAiE,GAAjE,CACD,CA/JK,CAgKN;;OAGAJ,sBAnKM,kCAmKmB,CACvB,GAAG,KAAKvB,KAAR,CAAe,CACb,GAAI,CAAC,KAAKR,QAAL,GAAkB,MAAlB,EAA4B,KAAKA,QAAL,GAAkB,OAA/C,GAA2DoC,OAAOC,UAAP,CAAoB,GAAhF,EACA,CAAC,KAAKrC,QAAL,GAAkB,KAAlB,EAA2B,KAAKA,QAAL,GAAkB,QAA9C,GAA2DoC,OAAOE,WAAP,CAAqB,GADnF,CACyF,CACvF,KAAKzB,SAAL,CAAiB,IAClB,CAHD,IAIK,CACH,KAAKA,SAAL,CAAiB,KAClB,CACF,CARD,IASK,CACH,GAAI,CAAC,KAAKb,QAAL,GAAkB,MAAlB,EAA4B,KAAKA,QAAL,GAAkB,OAA/C,GAA2D,KAAKuC,UAAL,CAAgBC,qBAAhB,GAAwCC,KAAxC,CAAgD,GAA5G,EACA,CAAC,KAAKzC,QAAL,GAAkB,KAAlB,EAA2B,KAAKA,QAAL,GAAkB,QAA9C,GAA2D,KAAKuC,UAAL,CAAgBC,qBAAhB,GAAwCE,MAAxC,CAAiD,GAD/G,CACqH,CACnH,KAAK7B,SAAL,CAAiB,IAClB,CAHD,IAIK,CACH,KAAKA,SAAL,CAAiB,KAClB,CACF,CACF,CAtLK,CAuLN8B,SAvLM,oBAuLI/B,WAvLJ,CAuLiBP,MAvLjB,CAuLyB,CAC7B,MAAQO,cAAeP,MAAhB,EAA2B,CAACO,WACpC,CAzLK,CAAR,CA4LD,CA7LD","file":"px-panel.js","sourcesContent":["(function() {\n  Polymer({\n\n    is: 'px-panel',\n\n    behaviors: [\n      Polymer.IronResizableBehavior,\n      Polymer.IronA11yKeysBehavior\n    ],\n\n    listeners: {\n      'iron-resize': '_handleResize'\n    },\n\n    /**\n     * Used by iron-a11y-keys-behavior.\n     */\n    keyBindings: {\n      'esc': 'close'\n    },\n\n    hostAttributes: {\n      'role': 'region'\n    },\n\n    properties: {\n      /**\n      * Where to place the panel - one of `top`, `bottom`, `left`, or `right`.\n      */\n      position: {\n        type: String,\n        value: 'right',\n        observer: '_handleResize'\n      },\n      /**\n       * Whether the panel is currently open (expanded).\n       */\n      opened: {\n        type: Boolean,\n        value: false,\n        notify: true,\n        observer: '_handleResize'\n      },\n      /**\n       * If set to true, the panel will have `position:fixed` so it will\n       * be attached to the browser window instead of its parent container.\n       */\n      fixed: {\n        type: Boolean,\n        value: false,\n        observer: '_handleResize'\n      },\n      /**\n       * If set to true, the panel will be opened and calls to the `close()` method will be ignored.\n       * Mutating the `opened` property will still force a close of the panel.\n       */\n      persistent: {\n        type: Boolean,\n        value: false,\n        observer: '_persistentChanged'\n      },\n      /**\n       * Whether to display the panel with a `light`, `medium`, or `dark` background.\n       * These terms are relative, and can be used in conjunction with px-theme,\n       * px-dark-theme, or your custom theme or CSS variables to toggle between 3 different\n       * background colors.\n       */\n      background: {\n        type: String,\n        value: 'light'\n      },\n      /**\n       * If set to true, the panel will appear with an offset relative to the screen / container edges.\n       * Can be overridden or customized using the CSS variables.\n       */\n      floating: {\n        type: Boolean,\n        value: false\n      },\n      /**\n       * If set to true, the panel will not fully collapse when closed. It will appear in a minimized state.\n       * You can use the content slot `minimized` to determine what will appear inside the panel while minimized\n       * (likely an icon or button for fully opening the panel).\n       */\n      minimizable: {\n        type: Boolean,\n        value: false\n      },\n      /**\n       * Used internally to determine if the panel should display at full-width or full-height\n       * for mobile responsiveness and space-constrained situations.\n       */\n      _fullSize: {\n        type: Boolean,\n        value: false\n      },\n      /**\n       * Used by iron-a11y-keys-behavior.\n       */\n      keyEventTarget: {\n        type: Object,\n        value: function() {\n          return document.body;\n        }\n      }\n\n    },\n    /**\n    * Opens the panel.\n    */\n    open() {\n      this.opened = true;\n    },\n    /**\n    * Closes the panel. Also called by iron-a11y-keys-behavior when a user presses the \"Esc\" key.\n    */\n    close() {\n      if(!this.persistent) {\n        this.opened = false;\n      }\n    },\n    /**\n     * Returns the appropriate classes based on the property values.\n     */\n    _getContainerClasses(position,background,fixed,persistent,opened,floating,minimizable,fullSize) {\n      var classes = [position, background];\n      if(fixed) classes.push('fixed');\n      if(persistent) classes.push('persistent');\n      if(opened) classes.push('opened');\n      if(floating) classes.push('floating');\n      if(minimizable) classes.push('minimizable');\n      if(fullSize) classes.push('full-size');\n      return classes.join(' ');\n    },\n    /**\n     * Sets the `opened` property for persistent panels.\n     */\n    _persistentChanged(newValue) {\n      if(newValue && !this.opened) {\n        this.open();\n      }\n    },\n    /**\n     * Called when an `iron-resize` event notifies the element that its\n     * parent container size may have changed.\n     *\n     * Size changed events will be collapsed to only trigger a new measurement\n     * every 100ms. If the panel is currently hidden, measure events\n     * will not be triggered.\n     */\n    _handleResize(e) {\n      const debouncer = 'measure-available-width';\n      if (typeof this._availableWidth !== 'number') {\n        this._measureAvailableWidth();\n        return;\n      }\n      if (this.isDebouncerActive(debouncer)) {\n        this.cancelDebouncer(debouncer);\n      }\n      this.debounce(debouncer, this._measureAvailableWidth.bind(this), 100);\n    },\n    /**\n     * Determines whether the panel should be displayed fullSize for responsiveness.\n     */\n    _measureAvailableWidth() {\n      if(this.fixed) {\n        if(((this.position === \"left\" || this.position === \"right\") && window.innerWidth < 600) ||\n          ((this.position === \"top\" || this.position === \"bottom\") && window.innerHeight < 600)) {\n          this._fullSize = true;\n        }\n        else {\n          this._fullSize = false;\n        }\n      }\n      else {\n        if(((this.position === \"left\" || this.position === \"right\") && this.parentNode.getBoundingClientRect().width < 600) ||\n          ((this.position === \"top\" || this.position === \"bottom\") && this.parentNode.getBoundingClientRect().height < 600)) {\n          this._fullSize = true;\n        }\n        else {\n          this._fullSize = false;\n        }\n      }\n    },\n    _isHidden(minimizable, opened) {\n      return (minimizable && opened) || !minimizable;\n    }\n\n  });\n})();\n"]}