{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "### Usage\n\n    <px-slider value=\"50\" min=\"1\" max=\"100\"></px-slider>\n\n### Styling\nThe following custom properties are available for styling:\n\nCustom property | Description\n:---------------|:-------------\n`--px-slider-border-color` | Border color for the unselected portion of the slider\n`--px-slider-border-color--selected` | Border color for the selected portion of the slider\n`--px-slider-border-color--disabled` | Border color for the unselected portion of the slider when disabled\n`--px-slider-progress-border-color--disabled` | Border color for the selected portion of the slider when disabled\n|\n`--px-slider-background-color` | Background color for the unselected portion of the slider\n`--px-slider-background-color--selected` | Background color for the selected portion of the slider\n`--px-slider-background-color--hover` | Background color for the selected portion of the slider when hovered\n`--px-slider-background-color--pressed` | Background color for the selected portion of the slider when pressed\n`--px-slider-background-color--disabled` | Background color for the unselected portion of the slider when disabled\n`--px-slider-progress-background-color--disabled` | Background color for the selected portion of the slider when disabled\n|\n`--px-handle-stroke-color` | Border color for the handle\n`--px-handle-stroke-color--hover` | Border color for the handle when hovered\n`--px-handle-stroke-color--active` | Border color for the handle when pressed\n`--px-handle-color--disabled` | Border color for the handle when disabled\n|\n`--px-handle-background-color` | Background color for the handle\n`--px-handle-background-color--hover` | Background color for the handle when hovered\n`--px-handle-background-color--active` | Background color for the handle when pressed\n`--px-handle-background-color--disabled` | Background color for the handle when disabled\n|\n`--px-slider-label-color` | Text color for the min/max labels",
      "summary": "",
      "path": "px-slider.html",
      "properties": [
        {
          "name": "_parentResizable",
          "type": "Object",
          "description": "The closest ancestor element that implements `IronResizableBehavior`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 36,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_parentResizableChanged\""
            }
          },
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_notifyingDescendant",
          "type": "boolean",
          "description": "True if this element is currently notifying its descendant elements of\nresize.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 45,
              "column": 6
            },
            "end": {
              "line": 48,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "format",
          "type": "string",
          "description": "The format used to generate the output",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-number-formatter/px-number-formatter-behavior.html",
            "start": {
              "line": 38,
              "column": 6
            },
            "end": {
              "line": 40,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxNumberFormatter.commonProperties"
        },
        {
          "name": "currency",
          "type": "boolean",
          "description": "Specify whether the value should be formatted as a currency",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-number-formatter/px-number-formatter-behavior.html",
            "start": {
              "line": 45,
              "column": 6
            },
            "end": {
              "line": 48,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxNumberFormatter.commonProperties"
        },
        {
          "name": "culture",
          "type": "string",
          "description": "Provide localization for currency formatting",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-number-formatter/px-number-formatter-behavior.html",
            "start": {
              "line": 53,
              "column": 6
            },
            "end": {
              "line": 56,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"en-US\"",
          "inheritedFrom": "PxNumberFormatter.commonProperties"
        },
        {
          "name": "zeroFormat",
          "type": "string",
          "description": "Provide a new default format for `0` value",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-number-formatter/px-number-formatter-behavior.html",
            "start": {
              "line": 61,
              "column": 6
            },
            "end": {
              "line": 63,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxNumberFormatter.commonProperties"
        },
        {
          "name": "_height",
          "type": "number",
          "description": "Height of the svg: calculated from container size",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 158,
              "column": 8
            },
            "end": {
              "line": 161,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "10"
        },
        {
          "name": "_width",
          "type": "number",
          "description": "Width of the svg: calculated from container size",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 166,
              "column": 8
            },
            "end": {
              "line": 169,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "52"
        },
        {
          "name": "_margin",
          "type": "Object",
          "description": "Margin for the svg elems centering the bars and providing space around them for the handles",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 174,
              "column": 8
            },
            "end": {
              "line": 185,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "value",
          "type": "number",
          "description": "For single sliders: the value for the slider's handle.\nFor multi-handled/ranged sliders: the value for the left / start slider's handle.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 191,
              "column": 8
            },
            "end": {
              "line": 195,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "0"
        },
        {
          "name": "endValue",
          "type": "number",
          "description": "For multi-handled/ranged sliders only: the value of the right handle / end of the selected range.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 200,
              "column": 8
            },
            "end": {
              "line": 204,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "null"
        },
        {
          "name": "formattedStartValue",
          "type": "string",
          "description": "The display value for the left input box",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 209,
              "column": 8
            },
            "end": {
              "line": 211,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "formattedEndValue",
          "type": "string",
          "description": "The display value for the right input box",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 216,
              "column": 8
            },
            "end": {
              "line": 218,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "min",
          "type": "number",
          "description": "A minimum value for the slider. The user cannot choose less than the min.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 223,
              "column": 8
            },
            "end": {
              "line": 226,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "1"
        },
        {
          "name": "max",
          "type": "number",
          "description": "A maximum value for the slider. The user cannot choose greater than the max.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 230,
              "column": 8
            },
            "end": {
              "line": 233,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "100"
        },
        {
          "name": "_minMaxValid",
          "type": "number",
          "description": "A trigger that is greater than 0 if the min and max are valid",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 237,
              "column": 8
            },
            "end": {
              "line": 240,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0"
        },
        {
          "name": "step",
          "type": "number",
          "description": "Specifies the step size for the slider values.\n\nFor example:\nSetting step to 10 limits values to multiples of 10 over the min value.\nThe default of 1 ensures that you only get integers for your value.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 248,
              "column": 8
            },
            "end": {
              "line": 252,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_stepChanged\""
            }
          },
          "defaultValue": "1"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "description": "A boolean reflecting whether the slider is disabled or not.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 256,
              "column": 8
            },
            "end": {
              "line": 260,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_setupListeners\""
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "hideInputs",
          "type": "boolean",
          "description": "A boolean reflecting whether the text input fields should be hidden.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 265,
              "column": 8
            },
            "end": {
              "line": 268,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_showStartInput",
          "type": "boolean",
          "description": "A boolean specifying if the first input box should be shown",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 273,
              "column": 8
            },
            "end": {
              "line": 276,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true"
        },
        {
          "name": "_showEndInput",
          "type": "boolean",
          "description": "A boolean specifying if the second input box should be shown",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 281,
              "column": 8
            },
            "end": {
              "line": 284,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "isRange",
          "type": "boolean",
          "description": "Boolean specifying if we are dealing with a single slider or a range",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 289,
              "column": 8
            },
            "end": {
              "line": 292,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "scale",
          "type": "string",
          "description": "The scale by which the slider operates - currently supports:\n- `linear`\n- `logarithmic`\n- `exponential`",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 300,
              "column": 8
            },
            "end": {
              "line": 304,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_createScale\""
            }
          },
          "defaultValue": "\"linear\""
        },
        {
          "name": "base",
          "type": "number",
          "description": "The base number only for logarithmic scales",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 309,
              "column": 8
            },
            "end": {
              "line": 312,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "10"
        },
        {
          "name": "exponent",
          "type": "number",
          "description": "The exponent number only for exponential scales",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 317,
              "column": 8
            },
            "end": {
              "line": 320,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "1"
        },
        {
          "name": "_scale",
          "type": "Function",
          "description": "Holder object for the scale function",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 325,
              "column": 8
            },
            "end": {
              "line": 327,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_scaleChanged",
          "type": "boolean",
          "description": "A trigger for changes in the scale range or domain",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 332,
              "column": 8
            },
            "end": {
              "line": 334,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_startHandle",
          "type": "Object",
          "description": "A holder for the handle d3 selected elem",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 339,
              "column": 8
            },
            "end": {
              "line": 341,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_endHandle",
          "type": "Object",
          "description": "A holder for the handle d3 selected elem",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 346,
              "column": 8
            },
            "end": {
              "line": 348,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_progressBar",
          "type": "Object",
          "description": "A holder for the progress bar d3 selected elem",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 353,
              "column": 8
            },
            "end": {
              "line": 355,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_backgroundTrack",
          "type": "Object",
          "description": "A holder for the background track d3 selected elem",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 360,
              "column": 8
            },
            "end": {
              "line": 362,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_inputStart",
          "type": "HTMLElement",
          "description": "A holder for the start input elem",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 367,
              "column": 8
            },
            "end": {
              "line": 369,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_inputEnd",
          "type": "HTMLElement",
          "description": "A holder for the end input elem",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 374,
              "column": 8
            },
            "end": {
              "line": 376,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_minLabel",
          "type": "Object",
          "description": "A holder for the min label",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 381,
              "column": 8
            },
            "end": {
              "line": 383,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_maxLabel",
          "type": "Object",
          "description": "A holder for the max label",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 388,
              "column": 8
            },
            "end": {
              "line": 390,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_format",
          "type": "string",
          "description": "The format string used to format the number in the input box",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 395,
              "column": 8
            },
            "end": {
              "line": 398,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"0\""
        },
        {
          "name": "showLabels",
          "type": "boolean",
          "description": "Specifies if the min and max slider labels should be shown",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 403,
              "column": 8
            },
            "end": {
              "line": 406,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "minLabelPosition",
          "type": "string",
          "description": "The vertical location for the Min label. Valid values are:\n- 'bottom' (default)\n- 'top'",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 413,
              "column": 8
            },
            "end": {
              "line": 416,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"bottom\""
        },
        {
          "name": "maxLabelPosition",
          "type": "string",
          "description": "The vertical location for the Max label. Valid values are:\n- 'bottom' (default)\n- 'top'",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 423,
              "column": 8
            },
            "end": {
              "line": 426,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"bottom\""
        },
        {
          "name": "_handleDefinitions",
          "type": "Object",
          "description": "The path definitions for the handles",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 431,
              "column": 8
            },
            "end": {
              "line": 446,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{\"circle\":{\"bodyD\":\"m0,-7.5c5,0 10,5 10,10c0,5 -5,10 -10,10c-5,0 -10,-5 -10,-10c0,-5 5,-10 10,-10z\"},\"down\":{\"bodyD\":\"m7.5,-13l-15,0l7.5,12l7.5,-12z\"},\"up\":{\"bodyD\":\"m7.5,18l-15,0l7.5,-12l7.5,12z\"}}"
        }
      ],
      "methods": [
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 55,
              "column": 4
            },
            "end": {
              "line": 60,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 470,
              "column": 6
            },
            "end": {
              "line": 472,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 66,
              "column": 4
            },
            "end": {
              "line": 74,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "notifyResize",
          "description": "Can be called to manually notify a resizable and its descendant\nresizables of a resize change.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 80,
              "column": 4
            },
            "end": {
              "line": 92,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "assignParentResizable",
          "description": "Used to assign the closest resizable ancestor to this resizable\nif the ancestor detects a request for notifications.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 98,
              "column": 4
            },
            "end": {
              "line": 100,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "parentResizable"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "stopResizeNotificationsFor",
          "description": "Used to remove a resizable descendant from the list of descendants\nthat should be notified of a resize change.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 113,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "target"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "resizerShouldNotify",
          "description": "This method can be overridden to filter nested elements that should or\nshould not be notified by the current element. Return true if an element\nshould be notified, or false if it should not be notified.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 124,
              "column": 4
            },
            "end": {
              "line": 124,
              "column": 59
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "A candidate descendant element that\nimplements `IronResizableBehavior`."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the `element` should be notified of resize."
          },
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_onDescendantIronResize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 126,
              "column": 4
            },
            "end": {
              "line": 138,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_fireResize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 140,
              "column": 4
            },
            "end": {
              "line": 145,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_onIronRequestResizeNotifications",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 147,
              "column": 4
            },
            "end": {
              "line": 162,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_parentResizableChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 164,
              "column": 4
            },
            "end": {
              "line": 168,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "parentResizable"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_notifyDescendant",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 170,
              "column": 4
            },
            "end": {
              "line": 181,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "descendant"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_requestResizeNotifications",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 183,
              "column": 4
            },
            "end": {
              "line": 211,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 466,
              "column": 6
            },
            "end": {
              "line": 468,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_animationFrame",
          "description": "Do general setup on our svg once we have an animation frame and know stuff exists\n- create listeners\n- draw our handles",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 479,
              "column": 6
            },
            "end": {
              "line": 502,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_setupListeners",
          "description": "Setup our listeners",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 507,
              "column": 6
            },
            "end": {
              "line": 525,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_createHandleListeners",
          "description": "Creates the drag behavior and hover, pressed states for the handles.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 530,
              "column": 6
            },
            "end": {
              "line": 559,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "handle"
            },
            {
              "name": "valueVar"
            }
          ]
        },
        {
          "name": "_createTrackListeners",
          "description": "Creates the click listeners on the progress bars to enable click to jump value",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 564,
              "column": 6
            },
            "end": {
              "line": 572,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_trackOnClick",
          "description": "The actual callback for our track on click",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 577,
              "column": 6
            },
            "end": {
              "line": 591,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "elem"
            }
          ]
        },
        {
          "name": "_removeHandleListeners",
          "description": "Clears the listeners from the handles",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 596,
              "column": 6
            },
            "end": {
              "line": 599,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_removeTrackListeners",
          "description": "clears the listeners from the track",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 604,
              "column": 6
            },
            "end": {
              "line": 608,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_buildHandles",
          "description": "For flexibility and efficiency, the basic paths and lines are already loaded into the dom.\nWe just need to actually add paths, etc so they are not invisible, which is what this function does.\nThis way, we dont have to do special setup in range vs single mode, just dont draw the other handle\nwhen in single mode and just morph the drawing of the single handle when in range mode.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 616,
              "column": 6
            },
            "end": {
              "line": 634,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_assignInputElems",
          "description": "saves our input fields as a property for conveinence",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 639,
              "column": 6
            },
            "end": {
              "line": 645,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_onIronResize",
          "description": "Resizes the slider based on parent box size",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 650,
              "column": 6
            },
            "end": {
              "line": 668,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_hideInputsChanged",
          "description": "Shows or hides the input boxes based on settings. Triggers the dom-ifs in the Template",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 673,
              "column": 6
            },
            "end": {
              "line": 684,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hideInputs"
            }
          ]
        },
        {
          "name": "_getSvgWidth",
          "description": "Returns the width to be used for the svg",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 689,
              "column": 6
            },
            "end": {
              "line": 693,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "_width"
            },
            {
              "name": "_margin"
            }
          ]
        },
        {
          "name": "_getSvgHeight",
          "description": "Returns the height to be used for the svg",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 697,
              "column": 6
            },
            "end": {
              "line": 701,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "_height"
            },
            {
              "name": "_margin"
            }
          ]
        },
        {
          "name": "_calcTransform",
          "description": "Calculates the transform for the svg elems",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 706,
              "column": 6
            },
            "end": {
              "line": 708,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_stepChanged",
          "description": "Validates that the step property is valid value",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 713,
              "column": 6
            },
            "end": {
              "line": 729,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_minOrMaxChanged",
          "description": "Validates the the min and max values to ensure that the min is < the max",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 734,
              "column": 6
            },
            "end": {
              "line": 760,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "min"
            },
            {
              "name": "max"
            }
          ]
        },
        {
          "name": "_createScale",
          "description": "Creates a scale which translate pixel coordinates into our data values",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 765,
              "column": 6
            },
            "end": {
              "line": 769,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_createScaleDebounced",
          "description": "Creates a scale for realz",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 774,
              "column": 6
            },
            "end": {
              "line": 788,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_setRange",
          "description": "Set our scale's range: the pixel max and min to use in the translation",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 793,
              "column": 6
            },
            "end": {
              "line": 801,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "_scale"
            },
            {
              "name": "_width"
            },
            {
              "name": "_height"
            }
          ]
        },
        {
          "name": "_setRangeDebouced",
          "description": "Set our scale's range for realz",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 806,
              "column": 6
            },
            "end": {
              "line": 821,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_setDomain",
          "description": "Set our scale's domain: the data max and min to use in the translation",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 826,
              "column": 6
            },
            "end": {
              "line": 834,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "_scale"
            },
            {
              "name": "_minMaxValid"
            }
          ]
        },
        {
          "name": "_setDomainDebounced",
          "description": "Set our scale's domain for realz",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 839,
              "column": 6
            },
            "end": {
              "line": 844,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_calcSliderValue",
          "description": "Calculate the slider handle value from the mouse position",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 849,
              "column": 6
            },
            "end": {
              "line": 853,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "mouseVal"
            },
            {
              "name": "valueVar"
            }
          ]
        },
        {
          "name": "_calcSliderValueDebounced",
          "description": "Calculate the slider handle value for realz",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 858,
              "column": 6
            },
            "end": {
              "line": 871,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "mouseVal"
            },
            {
              "name": "valueVar"
            }
          ]
        },
        {
          "name": "_calcStepRounded",
          "description": "Rounds the raw pixel translated value to one that matches our step size",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 876,
              "column": 6
            },
            "end": {
              "line": 884,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "_validateValue",
          "description": "Validate the value",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 889,
              "column": 6
            },
            "end": {
              "line": 918,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "v"
            },
            {
              "name": "thisVal"
            }
          ]
        },
        {
          "name": "_valueChanged",
          "description": "When the value property changes, sync the handle position",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 923,
              "column": 6
            },
            "end": {
              "line": 933,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "_scale"
            },
            {
              "name": "_scaleChanged"
            }
          ]
        },
        {
          "name": "_endValueChanged",
          "description": "When the endValue property changes, sync the handle position",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 938,
              "column": 6
            },
            "end": {
              "line": 947,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "endValue"
            },
            {
              "name": "_scale"
            },
            {
              "name": "_scaleChanged"
            }
          ]
        },
        {
          "name": "_moveHandle",
          "description": "Apply a transform to the handle to move it",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 952,
              "column": 6
            },
            "end": {
              "line": 954,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "handle"
            },
            {
              "name": "v"
            }
          ]
        },
        {
          "name": "_calcProgressStart",
          "description": "Update the starting point of the progress bar based on the value property and isRange",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 959,
              "column": 6
            },
            "end": {
              "line": 966,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "_scaleChanged"
            },
            {
              "name": "isRange"
            }
          ]
        },
        {
          "name": "_calcProgressEnd",
          "description": "Update the end point of the progress bar based on the value property or endValue property",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 971,
              "column": 6
            },
            "end": {
              "line": 979,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "endValue"
            },
            {
              "name": "_scaleChanged"
            },
            {
              "name": "isRange"
            }
          ]
        },
        {
          "name": "_updateFormat",
          "description": "Updates the formating string for nubmer-formatter",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 984,
              "column": 6
            },
            "end": {
              "line": 1004,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "step"
            },
            {
              "name": "format"
            }
          ]
        },
        {
          "name": "_inputChangedStart",
          "description": "User has changed the text in the left input field",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1009,
              "column": 6
            },
            "end": {
              "line": 1013,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt"
            }
          ]
        },
        {
          "name": "_inputChangedEnd",
          "description": "User has changed the text in the right input field",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1018,
              "column": 6
            },
            "end": {
              "line": 1022,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt"
            }
          ]
        },
        {
          "name": "_inputChanged",
          "description": "When an input field has changed, validates the input and sets the value property",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1027,
              "column": 6
            },
            "end": {
              "line": 1068,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "text"
            },
            {
              "name": "inputElem"
            },
            {
              "name": "formatterId"
            },
            {
              "name": "valueVar"
            }
          ]
        },
        {
          "name": "_restoreStartInputValue",
          "description": "If the user hits ESC on an input field, reset the display value",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1073,
              "column": 6
            },
            "end": {
              "line": 1075,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt"
            }
          ]
        },
        {
          "name": "_restoreEndInputValue",
          "description": "If the user hits ESC on an input field, reset the display value",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1080,
              "column": 6
            },
            "end": {
              "line": 1082,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt"
            }
          ]
        },
        {
          "name": "_restoreInputValue",
          "description": "Reset the display value in the input field to the coresponding value property",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1087,
              "column": 6
            },
            "end": {
              "line": 1092,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "input"
            },
            {
              "name": "formattedVal"
            }
          ]
        },
        {
          "name": "_checkEndValue",
          "description": "Checks the value of the endValue on initialization to ensure it is valid",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1097,
              "column": 6
            },
            "end": {
              "line": 1105,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_isRangeChanged",
          "description": "Fired when isRange changes value to turn the slider into a range slider or single slider",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1110,
              "column": 6
            },
            "end": {
              "line": 1121,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isRange"
            }
          ]
        },
        {
          "name": "_toggleDisabledClass",
          "description": "Sets disabled  styles",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1126,
              "column": 6
            },
            "end": {
              "line": 1133,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_returnLabel",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1135,
              "column": 6
            },
            "end": {
              "line": 1137,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "label"
            },
            {
              "name": "showLabels"
            }
          ]
        },
        {
          "name": "_returnLabelPosition",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1139,
              "column": 6
            },
            "end": {
              "line": 1146,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "labelPosition"
            },
            {
              "name": "isRange"
            }
          ]
        },
        {
          "name": "_returnLabelBaseline",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1148,
              "column": 6
            },
            "end": {
              "line": 1150,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "labelPosition"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 152,
          "column": 12
        },
        "end": {
          "line": 1151,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "format",
          "description": "The format used to generate the output",
          "sourceRange": {
            "file": "bower_components/px-number-formatter/px-number-formatter-behavior.html",
            "start": {
              "line": 38,
              "column": 6
            },
            "end": {
              "line": 40,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxNumberFormatter.commonProperties"
        },
        {
          "name": "currency",
          "description": "Specify whether the value should be formatted as a currency",
          "sourceRange": {
            "file": "bower_components/px-number-formatter/px-number-formatter-behavior.html",
            "start": {
              "line": 45,
              "column": 6
            },
            "end": {
              "line": 48,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxNumberFormatter.commonProperties"
        },
        {
          "name": "culture",
          "description": "Provide localization for currency formatting",
          "sourceRange": {
            "file": "bower_components/px-number-formatter/px-number-formatter-behavior.html",
            "start": {
              "line": 53,
              "column": 6
            },
            "end": {
              "line": 56,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxNumberFormatter.commonProperties"
        },
        {
          "name": "zero-format",
          "description": "Provide a new default format for `0` value",
          "sourceRange": {
            "file": "bower_components/px-number-formatter/px-number-formatter-behavior.html",
            "start": {
              "line": 61,
              "column": 6
            },
            "end": {
              "line": 63,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxNumberFormatter.commonProperties"
        },
        {
          "name": "value",
          "description": "For single sliders: the value for the slider's handle.\nFor multi-handled/ranged sliders: the value for the left / start slider's handle.",
          "sourceRange": {
            "start": {
              "line": 191,
              "column": 8
            },
            "end": {
              "line": 195,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "end-value",
          "description": "For multi-handled/ranged sliders only: the value of the right handle / end of the selected range.",
          "sourceRange": {
            "start": {
              "line": 200,
              "column": 8
            },
            "end": {
              "line": 204,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "formatted-start-value",
          "description": "The display value for the left input box",
          "sourceRange": {
            "start": {
              "line": 209,
              "column": 8
            },
            "end": {
              "line": 211,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "formatted-end-value",
          "description": "The display value for the right input box",
          "sourceRange": {
            "start": {
              "line": 216,
              "column": 8
            },
            "end": {
              "line": 218,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "min",
          "description": "A minimum value for the slider. The user cannot choose less than the min.",
          "sourceRange": {
            "start": {
              "line": 223,
              "column": 8
            },
            "end": {
              "line": 226,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "max",
          "description": "A maximum value for the slider. The user cannot choose greater than the max.",
          "sourceRange": {
            "start": {
              "line": 230,
              "column": 8
            },
            "end": {
              "line": 233,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "step",
          "description": "Specifies the step size for the slider values.\n\nFor example:\nSetting step to 10 limits values to multiples of 10 over the min value.\nThe default of 1 ensures that you only get integers for your value.",
          "sourceRange": {
            "start": {
              "line": 248,
              "column": 8
            },
            "end": {
              "line": 252,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "disabled",
          "description": "A boolean reflecting whether the slider is disabled or not.",
          "sourceRange": {
            "start": {
              "line": 256,
              "column": 8
            },
            "end": {
              "line": 260,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "hide-inputs",
          "description": "A boolean reflecting whether the text input fields should be hidden.",
          "sourceRange": {
            "start": {
              "line": 265,
              "column": 8
            },
            "end": {
              "line": 268,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "is-range",
          "description": "Boolean specifying if we are dealing with a single slider or a range",
          "sourceRange": {
            "start": {
              "line": 289,
              "column": 8
            },
            "end": {
              "line": 292,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "scale",
          "description": "The scale by which the slider operates - currently supports:\n- `linear`\n- `logarithmic`\n- `exponential`",
          "sourceRange": {
            "start": {
              "line": 300,
              "column": 8
            },
            "end": {
              "line": 304,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "base",
          "description": "The base number only for logarithmic scales",
          "sourceRange": {
            "start": {
              "line": 309,
              "column": 8
            },
            "end": {
              "line": 312,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "exponent",
          "description": "The exponent number only for exponential scales",
          "sourceRange": {
            "start": {
              "line": 317,
              "column": 8
            },
            "end": {
              "line": 320,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "show-labels",
          "description": "Specifies if the min and max slider labels should be shown",
          "sourceRange": {
            "start": {
              "line": 403,
              "column": 8
            },
            "end": {
              "line": 406,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "min-label-position",
          "description": "The vertical location for the Min label. Valid values are:\n- 'bottom' (default)\n- 'top'",
          "sourceRange": {
            "start": {
              "line": 413,
              "column": 8
            },
            "end": {
              "line": 416,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "max-label-position",
          "description": "The vertical location for the Max label. Valid values are:\n- 'bottom' (default)\n- 'top'",
          "sourceRange": {
            "start": {
              "line": 423,
              "column": 8
            },
            "end": {
              "line": 426,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "value-changed",
          "description": "Fired when the `value` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "end-value-changed",
          "description": "Fired when the `endValue` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-slider"
    }
  ]
}
