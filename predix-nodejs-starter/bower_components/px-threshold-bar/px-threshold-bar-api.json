{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "The px-threshold-bar is a linear multi-threshold simple bar chart used to show multiple thresholds for a single\ndata-source, while also showing the actual data value positioned in the overall threshold.\nThe user can specify as many thresholds as they want, configuring the color for each threshold.\nThey can also specify a unit of measure, if desired, using the `uom` property.\nTo show only the threshold bar with no actual value, don't set the value property.\n\n### Usage\n\n    <px-threshold-bar\n      min=\"0\"\n      max=\"100\"\n      value=\"25\"\n      uom=\"%\"\n      config='[{\"min\": 0,\"max\": 50,\"color\": \"red\"}, {\"min\": 50,\"max\": 100,\"color\": \"green\"}]'>\n    </px-threshold-bar>\n\n\n### Styling\nThe following variables are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--px-threshold-bar-marker-color` | The color of the marker caret, line, and value | `black`\n`--px-threshold-bar-scale-color` | The color of the tick lines and labels | `gray`\n`--px-threshold-bar-height` | The height of the threshold bar | `10px`\n`--px-threshold-bar-width` | The width of the threshold bar | `200px`\n`--px-threshold-bar-line-width` | The width of the marker line  | `1px`",
      "summary": "",
      "path": "px-threshold-bar.html",
      "properties": [
        {
          "name": "min",
          "type": "number",
          "description": "The minimum value for the threshold bar.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 90,
              "column": 6
            },
            "end": {
              "line": 93,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0"
        },
        {
          "name": "max",
          "type": "number",
          "description": "The maximum value for the threshold bar.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 98,
              "column": 6
            },
            "end": {
              "line": 101,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "100"
        },
        {
          "name": "hideValue",
          "type": "boolean",
          "description": "Prevents the value from being displayed on top of the bar.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 106,
              "column": 6
            },
            "end": {
              "line": 109,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "hideScale",
          "type": "boolean",
          "description": "Prevents the scale from being displayed below the bar.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 6
            },
            "end": {
              "line": 118,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "config",
          "type": "Array",
          "description": "Configuration for the tresholds.\nThe value should be an array of Objects with the following structure:\n\n    {\n      \"min\": {Number} beginning of the threshold,\n      \"max\": {Number} end of the threshold,\n      \"color\": {Hex / RGB} background color for the threshold\n    }\n\nNegative values are supported, but all thresholds should be contiguous\n(e.g. the max of one should be the min of the next one, with no gaps).\nIf thresholds are defined so narrowly that the tick label will not fit\ninside the treshold, display issues may occur.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 135,
              "column": 6
            },
            "end": {
              "line": 140,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]"
        },
        {
          "name": "value",
          "type": "number",
          "description": "The current value to be displayed on top of the threshold bar.\nIf this property is null a value won't be shown but the threshold bar will still be displayed.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 146,
              "column": 6
            },
            "end": {
              "line": 149,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null"
        },
        {
          "name": "uom",
          "type": "string",
          "description": "The unit of measure for the value, if any. You should use one or two characters at most,\nas longer values for UOM may cause display issues.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 155,
              "column": 6
            },
            "end": {
              "line": 158,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\""
        },
        {
          "name": "_scaleFactor",
          "type": "number",
          "description": "Holds the (pixel / range) scale factor used to calculate the threshold bars and value positioning.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 163,
              "column": 6
            },
            "end": {
              "line": 166,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null"
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 174,
              "column": 4
            },
            "end": {
              "line": 176,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_getStyles",
          "description": "Calculates the width of the specific threshold bars.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 181,
              "column": 4
            },
            "end": {
              "line": 185,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "config"
            }
          ]
        },
        {
          "name": "_scaleDataChanged",
          "description": "Observer that calculates the scale factor when the extremes of the threshold bar are changed.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 190,
              "column": 4
            },
            "end": {
              "line": 205,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_configDataChanged",
          "description": "Observer that orders the threshold configuration based on the min property.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 210,
              "column": 4
            },
            "end": {
              "line": 222,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "config"
            }
          ]
        },
        {
          "name": "_getMarkerLineStyle",
          "description": "Calculates the position of the Marker Line in the threshold bar",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 227,
              "column": 4
            },
            "end": {
              "line": 246,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_getMarkerStyle",
          "description": "Calculates the position of the Marker Icon in the threshold bar",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 251,
              "column": 4
            },
            "end": {
              "line": 270,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_getValueStyle",
          "description": "Calculates the position of the value label in the threshold bar",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 275,
              "column": 4
            },
            "end": {
              "line": 315,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_checkValuesSet",
          "description": "Verifies that values were set for the base properties min, max and value.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 320,
              "column": 4
            },
            "end": {
              "line": 326,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "includeValue"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 81,
          "column": 10
        },
        "end": {
          "line": 327,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "min",
          "description": "The minimum value for the threshold bar.",
          "sourceRange": {
            "start": {
              "line": 90,
              "column": 6
            },
            "end": {
              "line": 93,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "max",
          "description": "The maximum value for the threshold bar.",
          "sourceRange": {
            "start": {
              "line": 98,
              "column": 6
            },
            "end": {
              "line": 101,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "hide-value",
          "description": "Prevents the value from being displayed on top of the bar.",
          "sourceRange": {
            "start": {
              "line": 106,
              "column": 6
            },
            "end": {
              "line": 109,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "hide-scale",
          "description": "Prevents the scale from being displayed below the bar.",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 6
            },
            "end": {
              "line": 118,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "config",
          "description": "Configuration for the tresholds.\nThe value should be an array of Objects with the following structure:\n\n    {\n      \"min\": {Number} beginning of the threshold,\n      \"max\": {Number} end of the threshold,\n      \"color\": {Hex / RGB} background color for the threshold\n    }\n\nNegative values are supported, but all thresholds should be contiguous\n(e.g. the max of one should be the min of the next one, with no gaps).\nIf thresholds are defined so narrowly that the tick label will not fit\ninside the treshold, display issues may occur.",
          "sourceRange": {
            "start": {
              "line": 135,
              "column": 6
            },
            "end": {
              "line": 140,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "value",
          "description": "The current value to be displayed on top of the threshold bar.\nIf this property is null a value won't be shown but the threshold bar will still be displayed.",
          "sourceRange": {
            "start": {
              "line": 146,
              "column": 6
            },
            "end": {
              "line": 149,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "uom",
          "description": "The unit of measure for the value, if any. You should use one or two characters at most,\nas longer values for UOM may cause display issues.",
          "sourceRange": {
            "start": {
              "line": 155,
              "column": 6
            },
            "end": {
              "line": 158,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-threshold-bar"
    }
  ]
}
