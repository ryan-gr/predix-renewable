{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "### Usage\n\n    <px-deck-selector decks=\"[{...}]\" selected-deck=\"{...}\"></px-deck-selector>\n\n### Styling\n\nThe following custom properties are available for styling:\n\nCustom property | Description\n----------------|-------------\n`--px-deck-selector-border-color` | Border color for the dropdown\n`--px-deck-selector-shadow-color` | Shadow color for the dropdown\n`--px-deck-selector-background-color` | Background color for the dropdown\n`--px-deck-selector-text-color` | Text color for the dropdown items\n`--px-deck-selector-background-color--hover` | Background color for the dropdown items when hovered\n`--px-deck-selector-text-color--hover` | Text color for the dropdown items when hovered\n`--px-deck-selector-background-color--selected` | Background color for the dropdown item that is selected\n`--px-deck-selector-text-color--selected` | Text color for the dropdown item that is selected\n`--px-deck-selector-li-border` | Border color for the separator between decks and actions",
      "summary": "",
      "path": "px-deck-selector.html",
      "properties": [
        {
          "name": "decks",
          "type": "Array",
          "description": "Array of deck objects to display. The first deck will always be selected initially.\nEach object needs a `name` and `url` property.\n\n```\n[\n  {id: 1, name: 'First Deck', url: '/deck1'},\n  {id: 2, name: 'Second Deck', url: '/deck2'},\n  {id: 3, name: 'Third Deck', url: '/deck3'}\n]\n```",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 71,
              "column": 6
            },
            "end": {
              "line": 77,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_selectFirstDeck\""
            }
          },
          "defaultValue": "[]"
        },
        {
          "name": "selectedDeck",
          "type": "Object",
          "description": "Used for getting or setting the currently selected deck.  If no deck is specified, the first one will be selected.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 82,
              "column": 6
            },
            "end": {
              "line": 88,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{}"
        },
        {
          "name": "_isDropdownOpen",
          "type": "boolean",
          "description": "Set to true to open the dropdown and false to close it.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 93,
              "column": 6
            },
            "end": {
              "line": 97,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_handleDropdownOpenedChanged\""
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "configOptions",
          "type": "Object",
          "description": "Config options appear after the list of decks in a separate section, and can be used by an application\nto add or remove decks from the menu, for example. The object should contain an `actionType` which is the\ntext which will be displayed in the menu, and an `eventType` which will be included in evt.detail of\nthe `deckEvent` event that is fired when the option is selected. Applications should listen for the `deckEvent`\nevent and handle it accordingly (by displaying a modal for adding/removing decks, for example).\n\n```\n{\n  edit : true,\n  actionType : \"Add Dashboard\",\n  eventType : \"addDashboard\"\n}\n```",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 6
            },
            "end": {
              "line": 120,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{}"
        }
      ],
      "methods": [
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 123,
              "column": 4
            },
            "end": {
              "line": 125,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_selectFirstDeck",
          "description": "Always selects the first deck when `decks` are defined.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 130,
              "column": 4
            },
            "end": {
              "line": 134,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "decks"
            }
          ]
        },
        {
          "name": "_handleDropdownOpenedChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 136,
              "column": 4
            },
            "end": {
              "line": 143,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "opened"
            }
          ]
        },
        {
          "name": "_handleDocumentTapped",
          "description": "When the user taps somewhere else on the page when the dropdown is opened,\nclose the dropdown. If the user taps on the trigger do nothing and\nlet the trigger handler close the dropdown.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 150,
              "column": 4
            },
            "end": {
              "line": 157,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_handleTriggerTapped",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 159,
              "column": 4
            },
            "end": {
              "line": 161,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_handleDeckTapped",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 163,
              "column": 4
            },
            "end": {
              "line": 166,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_handleDeckEventTapped",
          "description": "Fires the event \"deckEvent\" where evt.detail will contain the eventType\nspecified in configOptions.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 172,
              "column": 4
            },
            "end": {
              "line": 175,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_hideChevronIfNoDecks",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 184,
              "column": 4
            },
            "end": {
              "line": 188,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "decks"
            }
          ]
        },
        {
          "name": "_isDeckSelected",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 190,
              "column": 4
            },
            "end": {
              "line": 192,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "deck"
            },
            {
              "name": "selectedDeck"
            }
          ]
        },
        {
          "name": "_getDropdownClassName",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 194,
              "column": 4
            },
            "end": {
              "line": 196,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "opened"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 55,
          "column": 10
        },
        "end": {
          "line": 197,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "decks",
          "description": "Array of deck objects to display. The first deck will always be selected initially.\nEach object needs a `name` and `url` property.\n\n```\n[\n  {id: 1, name: 'First Deck', url: '/deck1'},\n  {id: 2, name: 'Second Deck', url: '/deck2'},\n  {id: 3, name: 'Third Deck', url: '/deck3'}\n]\n```",
          "sourceRange": {
            "start": {
              "line": 71,
              "column": 6
            },
            "end": {
              "line": 77,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "selected-deck",
          "description": "Used for getting or setting the currently selected deck.  If no deck is specified, the first one will be selected.",
          "sourceRange": {
            "start": {
              "line": 82,
              "column": 6
            },
            "end": {
              "line": 88,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "config-options",
          "description": "Config options appear after the list of decks in a separate section, and can be used by an application\nto add or remove decks from the menu, for example. The object should contain an `actionType` which is the\ntext which will be displayed in the menu, and an `eventType` which will be included in evt.detail of\nthe `deckEvent` event that is fired when the option is selected. Applications should listen for the `deckEvent`\nevent and handle it accordingly (by displaying a modal for adding/removing decks, for example).\n\n```\n{\n  edit : true,\n  actionType : \"Add Dashboard\",\n  eventType : \"addDashboard\"\n}\n```",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 6
            },
            "end": {
              "line": 120,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "deckEvent",
          "description": "deckEvent",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "selected-deck-changed",
          "description": "Fired when the `selectedDeck` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "config-options-changed",
          "description": "Fired when the `configOptions` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-deck-selector"
    }
  ]
}
